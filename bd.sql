-- estrutura para tabela CLIENTES
CREATE TABLE IF NOT EXISTS `CLIENTES` (
  `ID_CLIENTE` int(11) NOT NULL,
  `DS_NOME` varchar(60) NOT NULL,
  `DS_CIDADE` varchar(40) DEFAULT NULL,
  `SG_UF` enum('AC','AL','AP','AM','BA','CE','DF','ES','GO','MA','MT','MS','MG','PA','PB','PR','PE','PI','RJ','RN','RS','RO','RR','SC','SP','SE','TO','EX') DEFAULT NULL,
  PRIMARY KEY (`ID_CLIENTE`),
  KEY `DS_NOME` (`DS_NOME`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- dados para a tabela CLIENTES
INSERT INTO `CLIENTES` (`ID_CLIENTE`, `DS_NOME`, `DS_CIDADE`, `SG_UF`) VALUES
	(1, 'CONSUMIDOR', NULL, NULL),
	(2, 'CLIENTE 01 ', NULL, NULL),
	(3, 'CLIENTE 02 ', NULL, NULL),
	(4, 'CLIENTE 03', NULL, NULL),
	(5, 'CLIENTE 04', NULL, NULL),
	(6, 'CLIENTE 05', NULL, NULL),
	(7, 'CLIENTE 06', NULL, NULL),
	(8, 'CLIENTE 07', NULL, NULL),
	(9, 'CLIENTE 08', NULL, NULL),
	(10, 'CLIENTE 09', NULL, NULL),
	(11, 'CLIENTE 10', NULL, NULL),
	(12, 'CLIENTE 11', NULL, NULL),
	(13, 'CLIENTE 12', NULL, NULL),
	(14, 'CLIENTE 13', NULL, NULL),
	(15, 'CLIENTE 14', NULL, NULL),
	(16, 'CLIENTE 15', NULL, NULL),
	(17, 'CLIENTE 16', NULL, NULL),
	(18, 'CLIENTE 17', NULL, NULL),
	(19, 'CLIENTE 18', NULL, NULL),
	(20, 'CLIENTE 19', NULL, NULL);

-- estrutura para tabela PRODUTOS
CREATE TABLE IF NOT EXISTS `PRODUTOS` (
  `ID_PRODUTO` int(11) NOT NULL,
  `DS_PRODUTO` varchar(50) NOT NULL,
  `VL_UNITARIO` decimal(15,2) DEFAULT NULL,
  PRIMARY KEY (`ID_PRODUTO`),
  KEY `DS_PRODUTO` (`DS_PRODUTO`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- dados para a tabela PRODUTOS
INSERT INTO `PRODUTOS` (`ID_PRODUTO`, `DS_PRODUTO`, `VL_UNITARIO`) VALUES
	(1, 'PRODUTOS DE MERCEARIA', 1),
	(2, 'PRODUTOS FRIOS', 2),
	(3, 'PRODUTOS 03', 3),
	(4, 'PRODUTOS 04', 4),
	(5, 'PRODUTOS 05', 5),
	(6, 'PRODUTOS 06', 6),
	(7, 'PRODUTOS 07', 7),
	(8, 'PRODUTOS 08', 8),
	(9, 'PRODUTOS 09', 9),
	(10, 'PRODUTOS 10', 10),
	(11, 'PRODUTOS 11', 11),
	(12, 'PRODUTOS 12', 12),
	(13, 'PRODUTOS 13', 13),
	(14, 'PRODUTOS 14', 14),
	(15, 'PRODUTOS 15', 15),
	(16, 'PRODUTOS 16', 16),
	(17, 'PRODUTOS 17', 17),
	(18, 'PRODUTOS 18', 18),
	(19, 'PRODUTOS 19', 19),
	(20, 'PRODUTOS 20', 20);

-- estrutura para tabela VENDAS
CREATE TABLE IF NOT EXISTS `VENDAS` (
  `VE_DATA` date NOT NULL DEFAULT curdate(),
  `VE_ID` int(11) NOT NULL,
  `VE_ID_CLIENTE` int(11) NOT NULL,
  `VE_EM_ANDAMENTO` bit(1) DEFAULT NULL,
  `VE_VL_TOTAL` decimal(15,2) DEFAULT NULL,
  PRIMARY KEY (`VE_DATA`,`VE_ID`),
  KEY `FK_VENDAS_CLIENTES` (`VE_ID_CLIENTE`),
  KEY `VE_EM_ANDAMENTO` (`VE_EM_ANDAMENTO`),
  CONSTRAINT `FK_VENDAS_CLIENTES` FOREIGN KEY (`VE_ID_CLIENTE`) REFERENCES `CLIENTES` (`ID_CLIENTE`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- dados para a tabela VENDAS

-- estrutura para tabela VENDAS_ITENS
CREATE TABLE IF NOT EXISTS `VENDAS_ITENS` (
  `VI_DT_VENDA` date NOT NULL,
  `VI_ID_VENDA` int(11) NOT NULL,
  `VI_ITEM` int(11) NOT NULL,
  `VI_ID_PRODUTO` int(11) NOT NULL,
  `NR_QUANTIDADE` decimal(15,2) NOT NULL,
  `VL_UNITARIO` decimal(15,2) NOT NULL,
  `VL_TOTAL` decimal(15,2) DEFAULT NULL,
  PRIMARY KEY (`VI_DT_VENDA`,`VI_ID_VENDA`,`VI_ITEM`),
  KEY `FK_VENDAS_ITENS_PRODUTOS` (`VI_ID_PRODUTO`),
  CONSTRAINT `FK_VENDAS_ITENS_PRODUTOS` FOREIGN KEY (`VI_ID_PRODUTO`) REFERENCES `PRODUTOS` (`ID_PRODUTO`) ON DELETE NO ACTION ON UPDATE CASCADE,
  CONSTRAINT `FK_VENDAS_ITENS_VENDAS` FOREIGN KEY (`VI_DT_VENDA`, `VI_ID_VENDA`) REFERENCES `VENDAS` (`VE_DATA`, `VE_ID`) ON DELETE NO ACTION ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- estrutura para função FN_SPACES
DELIMITER //
CREATE FUNCTION `FN_SPACES`(
  `TXT` VARCHAR(4000)
) RETURNS varchar(4000) CHARSET latin1
BEGIN
  WHILE INSTR(TXT, '  ') > 0 DO
    SET TXT = REPLACE(TXT, '  ', ' ');
  END WHILE;
  RETURN TXT;
END//
DELIMITER ;

-- estrutura para trigger CLIENTES_before_insert
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `CLIENTES_before_insert` BEFORE INSERT ON `CLIENTES` FOR EACH ROW BEGIN
  SET
    NEW.ID_CLIENTE = (SELECT COALESCE(MAX(ID_CLIENTE),0)+1 FROM CLIENTES),
    NEW.DS_NOME = FN_SPACES(UPPER(NEW.DS_NOME));
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger CLIENTES_before_update
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `CLIENTES_before_update` BEFORE UPDATE ON `CLIENTES` FOR EACH ROW BEGIN
  SET
    NEW.DS_NOME = FN_SPACES(UPPER(NEW.DS_NOME));
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger PRODUTOS_before_insert
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `PRODUTOS_before_insert` BEFORE INSERT ON `PRODUTOS` FOR EACH ROW BEGIN
  SET
    NEW.ID_PRODUTO = (SELECT COALESCE(MAX(ID_PRODUTO),0)+1 FROM PRODUTOS),
    NEW.DS_PRODUTO = FN_SPACES(UPPER(NEW.DS_PRODUTO));
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger PRODUTOS_before_update
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `PRODUTOS_before_update` BEFORE UPDATE ON `PRODUTOS` FOR EACH ROW BEGIN
  SET
    NEW.DS_PRODUTO = FN_SPACES(UPPER(NEW.DS_PRODUTO));
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_before_insert
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_before_insert` BEFORE INSERT ON `VENDAS` FOR EACH ROW BEGIN
  SET 
  NEW.VE_ID = (SELECT COALESCE(MAX(VE_ID),0)+1 FROM VENDAS WHERE EXTRACT(MONTH FROM VE_DATA) = EXTRACT(MONTH FROM CURDATE()) AND EXTRACT(YEAR FROM VE_DATA) = EXTRACT(YEAR FROM CURDATE())),
  NEW.VE_EM_ANDAMENTO = 1,
  NEW.VE_ID_CLIENTE = 1;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_ITENS_after_delete
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_ITENS_after_delete` AFTER DELETE ON `VENDAS_ITENS` FOR EACH ROW BEGIN
  UPDATE VENDAS SET VE_VL_TOTAL = (SELECT SUM(VI.VL_TOTAL) FROM VENDAS_ITENS VI WHERE VI.VI_DT_VENDA = OLD.VI_DT_VENDA AND VI.VI_ID_VENDA = OLD.VI_ID_VENDA) WHERE VE_DATA = OLD.VI_DT_VENDA AND VE_ID = OLD.VI_ID_VENDA;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_ITENS_after_insert
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_ITENS_after_insert` AFTER INSERT ON `VENDAS_ITENS` FOR EACH ROW BEGIN
  UPDATE VENDAS SET VE_VL_TOTAL = (SELECT SUM(VI.VL_TOTAL) FROM VENDAS_ITENS VI WHERE VI.VI_DT_VENDA = NEW.VI_DT_VENDA AND VI.VI_ID_VENDA = NEW.VI_ID_VENDA) WHERE VE_DATA = NEW.VI_DT_VENDA AND VE_ID = NEW.VI_ID_VENDA;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_ITENS_after_update
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_ITENS_after_update` AFTER UPDATE ON `VENDAS_ITENS` FOR EACH ROW BEGIN
  UPDATE VENDAS SET VE_VL_TOTAL = (SELECT SUM(VI.VL_TOTAL) FROM VENDAS_ITENS VI WHERE VI.VI_DT_VENDA = OLD.VI_DT_VENDA AND VI.VI_ID_VENDA = OLD.VI_ID_VENDA) WHERE VE_DATA = OLD.VI_DT_VENDA AND VE_ID = OLD.VI_ID_VENDA;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_ITENS_before_insert
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_ITENS_before_insert` BEFORE INSERT ON `VENDAS_ITENS` FOR EACH ROW BEGIN
  SET
  NEW.VI_ITEM = (SELECT COALESCE(MAX(VI_ITEM),0)+1 FROM VENDAS_ITENS WHERE EXTRACT(MONTH FROM NEW.VI_DT_VENDA) = EXTRACT(MONTH FROM CURDATE()) AND EXTRACT(YEAR FROM NEW.VI_DT_VENDA) = EXTRACT(YEAR FROM CURDATE())),
  NEW.VL_TOTAL = NEW.VL_UNITARIO * NEW.NR_QUANTIDADE;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;

-- estrutura para trigger VENDAS_ITENS_before_update
SET @OLDTMP_SQL_MODE=@@SQL_MODE, SQL_MODE='';
DELIMITER //
CREATE TRIGGER `VENDAS_ITENS_before_update` BEFORE UPDATE ON `VENDAS_ITENS` FOR EACH ROW BEGIN
  SET NEW.VL_TOTAL = NEW.VL_UNITARIO * NEW.NR_QUANTIDADE;
END//
DELIMITER ;
SET SQL_MODE=@OLDTMP_SQL_MODE;
